To configure Squid as an HTTPS proxy, you'll need to set up Squid to accept HTTPS connections and forward them to the destination servers securely. Here are the steps to configure Squid as an HTTPS proxy:

1. **Install Squid:**

   If Squid is not already installed on your system, you will need to install it. The installation process may vary depending on your operating system. On Debian-based systems, you can use `apt`:

   ```bash
   sudo apt-get update
   sudo apt-get install squid
   ```

   On Red Hat-based systems, you can use `yum`:

   ```bash
   sudo yum install squid
   ```

2. **Configure Squid:**

   Edit the Squid configuration file, usually located at `/etc/squid/squid.conf` on Linux systems. You can use your preferred text editor, such as `nano` or `vim`, to edit the file.

   ```bash
   sudo nano /etc/squid/squid.conf
   ```

3. **Configure Squid to Listen on an HTTPS Port:**

   Add or modify the following line to specify the HTTPS port on which Squid will listen. By default, Squid uses port 3128 for HTTP and port 3129 for HTTPS, but you can choose a different port if needed.

   ```conf
   http_port 3129 ssl-bump
   ```

   In this example, Squid will listen on port 3129 for HTTPS traffic.

4. **Configure SSL Bump Settings:**

   Squid uses the "SSL Bump" feature to handle HTTPS traffic. Add the following lines to your Squid configuration to enable SSL bump:

   ```conf
   # Enable SSL Bump
   acl localnet src 192.168.0.0/24  # Adjust this ACL to match your network
   ssl_bump allow all
   ssl_bump bump all
   ```

   Make sure to adjust the `localnet` ACL to match the IP range of the network that should be allowed to use the proxy.

5. **Configure SSL Certificate:**

   To handle HTTPS traffic, Squid needs to act as a man-in-the-middle, which requires generating an SSL certificate. You can either use a self-signed certificate or obtain a valid certificate from a trusted certificate authority (CA).

   To create a self-signed certificate, you can use the `openssl` command:

   ```bash
   sudo openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -keyout /etc/squid/squid.key -out /etc/squid/squid.crt
   ```

   Be sure to secure the generated key (`squid.key`) and certificate (`squid.crt`) files properly, as they are sensitive.

6. **Configure Squid to Use the SSL Certificate:**

   Add the following lines to your Squid configuration to specify the SSL certificate and key files:

   ```conf
   # SSL certificate and key files
   https_port 3129 cert=/etc/squid/squid.crt key=/etc/squid/squid.key
   ```

7. **Configure ACLs and Access Rules:**

   Customize your ACLs and access rules as needed to control who can use the proxy and which destinations are accessible. You can use ACLs to restrict access based on IP addresses, user agents, or other criteria.

8. **Restart Squid:**

   After making the necessary configuration changes, restart Squid to apply the settings:

   ```bash
   sudo systemctl restart squid
   ```

9. **Configure Client to Use the HTTPS Proxy:**

   Configure your client applications or devices to use the Squid HTTPS proxy. Set the proxy server address and port to the values you specified in the `http_port` directive (e.g., `3129`) and enable HTTPS proxying.

   Note that some applications may require additional configuration to trust the Squid-generated SSL certificate.

With these steps, you should have Squid configured as an HTTPS proxy. Clients can connect to it using the specified HTTPS port, and Squid will handle the secure forwarding of their requests to the destination servers.